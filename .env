#!/usr/bin/env bash

# update_by_dir_start

new_from_access_docstring_tryout(){
  new_from access-docstring-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_google_search_tryout(){
  new_from google-search-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_googletrans_tryout(){
  new_from googletrans-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_helloworld_tryout(){
  new_from helloworld-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_jsonpath_tryout(){
  new_from jsonpath-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_luigi_tryout(){
  new_from luigi-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_morph.io_tryout(){
  new_from morph.io-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_panda_tryout(){
  new_from panda-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_pycaret_tryout(){
  new_from pycaret-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_python_frontmatter_tryout(){
  new_from python-frontmatter-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_pyyaml_tryout(){
  new_from pyyaml-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_shutil_tryout(){
  new_from shutil-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_streamlit_tryout(){
  new_from streamlit-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_tesseract_tryout(){
  new_from tesseract-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_doctest_support_tryout(){
  new_from unittest-doctest-support-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_github_page_report_tryout(){
  new_from unittest-github-page-report-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_json_reporting_tryout(){
  new_from unittest-json-reporting-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_json_reporting_tryout_old(){
  new_from unittest-json-reporting-tryout-old
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_report_template_tryout(){
  new_from unittest-report-template-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_xmlrunner_tryout(){
  new_from unittest-xmlrunner-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_xmltodict_tryout(){
  new_from xmltodict-tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_yfinance_tryout(){
  new_from yfinance-tryout
  pipenv run python3 main.py
  ./run.sh
}

# update_by_dir_end



update_shortcut(){
  cp .env /tmp/.env

python3 << END
import os,sys
import subprocess
import shlex
import re
from pprint import pprint

new_command_template='''
new_from_##PROJ_NAME##(){
  new_from ##PROJ_DIR_NAME##
  pipenv run python3 main.py
  ./run.sh
}
'''

def simple_replace(x):
  output = re.sub( '##PROJ_NAME##', x.replace('-','_'), new_command_template,
    flags=re.MULTILINE)

  output = re.sub( '##PROJ_DIR_NAME##', x, output,
    flags=re.MULTILINE)

  return output

dirs = subprocess.check_output(shlex.split('ls -1')).decode('utf-8').split('\n')
tryout_dirs = list(filter(lambda x: x.find('-tryout') > 0, dirs))

new_commands_content = map( lambda x: simple_replace(x), tryout_dirs)



new_commands_string='\n'.join(
  ['# update_by_dir_start']+list(new_commands_content)+['# update_by_dir_end']
  )

temp = ''
with open('/tmp/.env','r') as fi:
  temp = ''.join(fi.readlines())
  temp = re.sub(r'# update_by_dir_start.+?# update_by_dir_end',
    new_commands_string,
    temp, count=1,flags=re.MULTILINE|re.DOTALL)

with open('/tmp/.env','w') as fo:
  fo.writelines(temp)

END

  cp /tmp/.env .env

}

new_from(){
  set -x

  rm -rf * &
  rm -rf .* &
  wait

  TEST=`echo $PWD|rev |cut -d'/' -f1 |rev`
  # git branch -D test/$TEST
  # git checkout -b test/$TEST

  rsync -avzh --exclude node_modules --exclude .cache --exclude public ../$1/ .


  pipenv sync

}

helloworld(){
  echo 'helloworld'
}

PROJ_ROOT=$PWD
