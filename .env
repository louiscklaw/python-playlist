#!/usr/bin/env bash

# update_by_dir_start

new_from_access_docstring_tryout(){
  new_from access_docstring_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_google_search_tryout(){
  new_from google_search_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_googletrans_tryout(){
  new_from googletrans_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_helloworld_tryout(){
  new_from helloworld_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_jsonpath_tryout(){
  new_from jsonpath_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_luigi_tryout(){
  new_from luigi_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_morph.io_tryout(){
  new_from morph.io_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_panda_tryout(){
  new_from panda_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_pycaret_tryout(){
  new_from pycaret_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_python_frontmatter_tryout(){
  new_from python_frontmatter_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_pyyaml_tryout(){
  new_from pyyaml_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_shutil_tryout(){
  new_from shutil_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_tesseract_tryout(){
  new_from tesseract_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_doctest_support_tryout(){
  new_from unittest_doctest_support_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_github_page_report_tryout(){
  new_from unittest_github_page_report_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_json_reporting_tryout(){
  new_from unittest_json_reporting_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_json_reporting_tryout_old(){
  new_from unittest_json_reporting_tryout_old
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_report_template_tryout(){
  new_from unittest_report_template_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_unittest_xmlrunner_tryout(){
  new_from unittest_xmlrunner_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_xmltodict_tryout(){
  new_from xmltodict_tryout
  pipenv run python3 main.py
  ./run.sh
}


new_from_yfinance_tryout(){
  new_from yfinance_tryout
  pipenv run python3 main.py
  ./run.sh
}

# update_by_dir_end



update_shortcut(){
  cp .env /tmp/.env

python3 << END
import os,sys
import subprocess
import shlex
import re
from pprint import pprint

new_command_template='''
new_from_##PROJ_NAME##(){
  new_from ##PROJ_NAME##
  pipenv run python3 main.py
  ./run.sh
}
'''

dirs = subprocess.check_output(shlex.split('ls -1')).decode('utf-8').split('\n')
tryout_dirs = list(filter(lambda x: x.find('-tryout') > 0, dirs))

new_commands_content = map(lambda x: re.sub('##PROJ_NAME##', x.replace('-','_'), new_command_template, flags=re.MULTILINE), tryout_dirs)

new_commands_string='\n'.join(
  ['# update_by_dir_start']+list(new_commands_content)+['# update_by_dir_end']
  )

temp = ''
with open('/tmp/.env','r') as fi:
  temp = ''.join(fi.readlines())
  temp = re.sub(r'# update_by_dir_start.+?# update_by_dir_end',
    new_commands_string,
    temp, count=1,flags=re.MULTILINE|re.DOTALL)

with open('/tmp/.env','w') as fo:
  fo.writelines(temp)

END

  cp /tmp/.env .env

}

new_from(){

  rm -rf * &
  rm -rf .* &
  wait

  TEST=`echo $PWD|rev |cut -d'/' -f1 |rev`
  git branch -D test/$TEST
  git checkout -b test/$TEST

  rsync -avzh --exclude node_modules --exclude .cache --exclude public ../$1/ .


  pipenv sync

}

helloworld(){
  echo 'helloworld'
}

PROJ_ROOT=$PWD
